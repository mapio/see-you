CFLAGS = -Wall -pedantic -ansi
CC = gcc

SOURCES = $(wildcard *.c)
OBJECTS = $(SOURCES:.c=.o)
TARGET = soluzione
INPUTS = $(wildcard input-*.txt)
DIFFS = $(INPUTS:input-%.txt=diffs-%.txt)

compile = $(CC) $(CFLAGS) -c -o $@ $<
link = $(CC) $^ -o $@
test = ./soluzione $$\(cat args-$*.txt\) \< $< \> $@

max_output = 1024 * 1024
exit_on_fail = true

red := bash -c 'echo -ne "\033[31m"'
blue := bash -c 'echo -ne "\033[34m"'
reset := bash -c 'echo -ne "\033[0m"'

.PHONY: compila test pulisci

compila: $(TARGET) ;

test: $(DIFFS) ;

pulisci:
	@rm -f *.o .compile-* .link-* .exec-* actual-*.txt diffs-*.txt $(TARGET)

%.o: %.c
	@rm -f .compile-$*
	@echo $(compile)
	@$(compile) -fmessage-length=0 2> .compile-$* || true
	@if grep -q warning: .compile-$*; then\
		$(red);\
		grep ': warning:' .compile-$*;\
		$(reset);\
	fi
	@if grep -q error: .compile-$*; then\
		$(blue);\
		grep ': error:' .compile-$*;\
		$(reset);\
		exit 1;\
	fi

$(TARGET): $(OBJECTS)
	@rm -f .link-$@
	@echo $(link)
	@$(link) -fmessage-length=0 2> .link-$@ || true
	@if grep -q "1 exit status" .link-$@; then\
		$(blue);\
		cat .link-$@;\
		$(reset);\
		exit 1;\
	fi

.PRECIOUS: actual-%.txt

actual-%.txt: input-%.txt args-%.txt $(TARGET)
	@rm -f .exec-$* $@
	@echo $(test)
	@if ! bash -c "set -o pipefail; ( ulimit -t 2; ./$(TARGET) $$(cat args-$*.txt) < $< ) 2> .exec-$* | head -c $$(( $(max_output) )) > $@"; then\
		if grep -qi "limit exceeded" .exec-$*; then\
			$(red);\
			echo execution timeout 1>&2;\
			$(reset);\
		else\
			$(blue);\
			echo non-zero return value 1>&2;\
			$(reset);\
		fi;\
		rm $@;\
		if $(exit_on_fail); then exit 1; fi;\
	fi


diffs-%.txt: output-%.txt actual-%.txt
	@echo diff -ub $^ \> $@
	@diff -ub $^ > $@ || true
	@if [ -s $@ ]; then\
	 	$(blue);\
		cat $@;\
		$(reset);\
		if $(exit_on_fail); then exit 1; fi;\
	fi
