#!/bin/bash

ckdiff() {
	local expected="$1"
	local error="$2"

	if [ -z "$error" ] || grep -q "$error" err; then
		actual="$(diff output-0.txt actual-0.txt 2>/dev/null | grep -E '^(<|>)' | tr \\n \#)"
		if [ "$actual" == "$expected" ]; then
			echo -n OK
		else
			echo -n FAIL, stdout: "$actual"
			exit 1
		fi
	else
		echo -n FAIL, stderr: "$(cat err)"
		exit 1
	fi
}

assert() {

	local name="$1"
	local makeopts="$2"
	local expected="$3"
	local error="$4"
	local testfailure="$5"
		# "": perform failure test
		# "NF": do not perform failure test
		# "F": expect make to fail

	echo -ne "\033[31m$name...\033[0m "
	rm -f err diff-* actual-*
	if ! [ "$testfailure" == "F" ]; then
		if make -e pulisci test $makeopts exit_on_fail=false > /dev/null 2> err; then
			ckdiff "$expected" "$error"
		else
			echo -n 'FAIL [make failed]'
		fi
	fi

	if [ -z "$testfailure" ] || [ "$testfailure" == "F" ]; then
		echo -ne " \033[31m(f)\033[0m "
		rm -f err diff-* actual-*
 		if make -e pulisci test $makeopts > /dev/null 2> err; then
			echo 'NOT FAILED [make]'
			exit 1
		else
			ckdiff "$expected" "$error"
			echo .
		fi
	else
		echo .
	fi
}

export MAKEFILES=$(pwd)/support/Makefile

tempdir=$(mktemp -d /tmp/cu-XXXXXXXXX) || exit 1
cd $tempdir

touch args-0.txt input-0.txt
echo -n AB > output-0.txt

# C

echo -e "\033[32m*** C targets...\033[0m"

echo -e '#include <stdio.h>\nint main( void ) { printf( "AB" ); return 0; }' > soluzione.c
assert "No error" "" "" "" NF
assert "Truncate" "max_output=1" "< AB#> A#" ""

echo 'int main( void ) { return 0; }' > soluzione.c
assert "Diff" "" "< AB#"

echo -e '#include <stdio.h>\nint main( void ) { printf( "X" ); return 1; }' > soluzione.c
assert "Retval (diff)" "" "< AB#> X#" "non-zero return value"

echo -e '#include <stdio.h>\nint main( void ) { printf( "AB" ); return 1; }' > soluzione.c
assert "Retval (nodiff)" "" "" "non-zero return value"

echo 'int main( void ) { for (;;); return 0; }' > soluzione.c
assert "Timeout" "" "" "execution timeout"

echo 'int main( void ) { int *x=0; *x=1; return 0; }' > soluzione.c
assert "Segfault" "" "" "segmentation fault"

echo 'int main' > soluzione.c
assert "Complier error" "" "" "compiler exit status" F

echo 'int main( void ) { f(); }' > soluzione.c
assert "Linker error" "" "" "ndefined symbol" F

# Java

echo -e "\033[32m*** Java targets...\033[0m"

rm -f soluzione.c

echo -e 'public class Test { public static void main( String[] args ) { System.out.print( "AB" ); } }' > Test.java
assert "No error" "" "" "" NF
assert "Truncate" "max_output=1" "< AB#> A#" ""

echo -e 'public class Test { public static void main( String[] args ) {} }' > Test.java
assert "Diff" "" "< AB#"

echo -e 'public class Test { public static void main( String[] args ) { for(;;); } }' > Test.java
assert "Timeout" "" "" "execution timeout"

echo 'int main' > Test.java
assert "Complier error" "" "" "compiler exit status" F

echo -e 'public class Test { public static void main( String[] args ) {} }' > Test.java
echo -e 'public class Tost { public static void main( String[] args ) {} }' > Tost.java
assert "Too many main found" "" "" "more than one main method found" F

rm -f *.java
assert "No main found" "" "" "no main method found" F


#chmod -R u+rwx $tempdir; rm -rf $tempdir
